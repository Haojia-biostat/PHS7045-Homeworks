---
title: "Homework 1"
author: "Haojia Li"
format: 
  gfm: default
date: "`r Sys.Date()`"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = T, warning = F, message = F, cache = F, comment = "")
options(knitr.kable.NA = "")
options(digits = 6)
```

```{r}
# function 1 - calculate number of participants  allocated to each arm in a vector
allocation <- function(
    n,         # total number of patients to be allocated
    alloc_prob # allocation probability
) {
  nt <- round(n*alloc_prob)
  # make sure the sum of allocated numbers equals to the input n
  if(sum(nt) != n) nt[1] <- n - sum(nt[-1])
  return(nt)
}

# function 2 - draw K times from the posterior distribution
posterior_prob <- function(
    alpha, 
    beta, 
    K,         # number of replicates
    cum_nt,    # cumulative number of participants allocated to each arm in a vector
    cum_sum_yt # cumulative number of successes in each arm
) {
  post_mat <- mapply(rbeta, K, alpha + cum_sum_yt, beta + cum_nt - cum_sum_yt)
  # add the column index of the largest prob for each row
  best_arm <- apply(post_mat, 1, which.max)
  return(cbind(post_mat, best_arm))
}

# function 3 - calculate V and re-normalize it (alloc_prob)
adapt_allocpr <- function(
    post_mat, # posterior matrix
    nt        # number of participants allocated to each arm in a vector
) {
  vt <- sapply(2:4, \(i) mean(post_mat[,5] == i))
  v0 <- min(c(
    sum(vt * (nt[-1]+1) / (nt[1]+1)), 
    max(vt)
  ))
  return(c(v0,vt)/sum(c(v0,vt)))
}

# function 4 - calculate the cumulative probability of picking successively better arms
cum_prob_best <- function(
    post_mat # matrix of posterior probability
) {
  sapply(list(c(2,3,4), c(3,4), 4), \(i) mean(post_mat[,5] %in% i))
}

rar_sim <- function(
    N             = 228, # total number of patients to be allocated in the trial
    interim       = 40, # size of each interim analysis when RAR is used
    trt_effect    = c(0.35, 0.45, 0.55, 0.65), # treatment effect
    alpha         = 0.35, # alpha for all the arms in beta distribution
    beta          = 0.65, # beta for all the arms in beta distribution
    K             = 1000, # number of draws in posterior distribution
    rar           = T # logical flag of whether to use RAR (T) or equal allocation (F)
) {
  # define result components
  res <- vector(mode = "list", length = 3)
  names(res) <- c("Design", "Allocation",  "Cum. prob. of best")
  
  # initial allocation probability regardless of design
  alloc_prob <- rep(0.25,4)
  # log of patient allocation
  nt_mat <- matrix(ncol = 4, nrow = 0)
  # simulate outcomes
  yt_list <- lapply(trt_effect, \(x) rbinom(N, 1, x))
  
  while(sum(nt_mat) < N) {
    if(rar) n <- min(interim, N - sum(nt_mat)) 
    else n <- N
    
    # 1. simulate nt and save it to `Num. of patients allocated`
    nt <- allocation(n, alloc_prob)
    nt_mat <- rbind(nt_mat, nt)
    cum_nt <- colSums(nt_mat)
    # 2. simulate posterior probability matrix based on cum_nt and cum_sum_yt
    post_mat <- posterior_prob(
      alpha = alpha, 
      beta = beta, 
      K = K,
      cum_nt = cum_nt, 
      cum_sum_yt = mapply(\(i,j) {sum(yt_list[[i]][1:j])}, 1:4, cum_nt)
      )
    # 3. if the allocation for the whole trial has not been completed, calculate the adaptive allocation probability
    if(sum(nt_mat) < N) alloc_prob <- adapt_allocpr(post_mat, nt)
    # 4. else, calculate the probability that each treatment arm is better than control
    else res$`Cum. prob. of best` <- cum_prob_best(post_mat)
  }
  
  if(rar) {
    res$Design <- "Response-adaptive randomization (RAR)"
    res$Allocation <- colSums(nt_mat)
  } else {
    res$Design <- "Equal allocation"
    res$Allocation <- nt_mat
  }
  names(res$`Cum. prob. of best`) <- c("Third best", "Second best", "Best")
  return(res)
}
```

```{r}
sim_equal <- replicate(10000, {rar_sim(rar = F)$`Cum. prob. of best`})
rowMeans(sim_equal)
sim_rar <- replicate(10000, {rar_sim(rar = T)$`Cum. prob. of best`})
rowMeans(sim_rar)

```
